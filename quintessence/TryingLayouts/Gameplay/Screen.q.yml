parent_classes:


  - class: AllegroFlare::Screens::Gameplay
    scope: public
    init_with: ''


properties:


  - name: data_folder_path
    type: std::string
    init_with: DEFAULT_DATA_FOLDER_PATH
    getter: true
    setter: before_initialized

  - name: asset_studio_database
    type: AllegroFlare::AssetStudio::Database*
    init_with: nullptr
    getter_ref: true
    setter: before_initialized

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    setter: before_initialized
    getter: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    setter: before_initialized

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    setter: before_initialized

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    setter: before_initialized

  - name: layout_camera_2d
    type: AllegroFlare::Camera2D
    init_with: '{}'

  - name: layout
    type: AllegroFlare::Layouts::Layout
    init_with: '{}'

  - name: layout_cursor_selection_box
    type: AllegroFlare::Elements::SelectionCursorBox
    init_with: '{}'

  - name: current_cursor_destination
    type: AllegroFlare::Layouts::Elements::CursorDestination*
    init_with: nullptr

  - name: current_level_identifier
    type: std::string
    init_with: '"[unset-current_level]"'

  - name: current_level
    type: TryingLayouts::Gameplay::Level*
    init_with: nullptr

  - name: initialized
    type: bool
    init_with: false
    getter: true

  - name: DEFAULT_DATA_FOLDER_PATH
    type: char*
    init_with: '(char*)"[unset-data_folder_path]"'
    static: true
    constexpr: true

  - name: TYPE
    type: char*
    init_with: '(char*)"TryingLayouts/Gameplay/Screen"'
    static: true
    constexpr: true


methods:


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - event_emitter
      - bitmap_bin
      - font_bin
      - model_bin
    body: |
      set_update_strategy(AllegroFlare::Screens::Base::UpdateStrategy::SEPARATE_UPDATE_AND_RENDER_FUNCS);

      layout.set_bitmap_bin(bitmap_bin);
      layout.set_font_bin(font_bin);
      layout.set_tmj_filename(data_folder_path + "layouts/" + "initial_layout-01.tmj");
      layout.set_scale(1);
      layout.initialize();

      // Setup the cursor to the initial position
      current_cursor_destination = layout.get_initial_cursor_destination();
      set_selection_cursor_box_to_new_position();

      // Wire up behavior
      wire_up_cursor_destination_activation_behavior();

      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: wire_up_cursor_destination_activation_behavior
    body: |
       layout.set_cursor_destinations_behavior({
          { "exit_game", {
             [this](){
                // On activate
                event_emitter->emit_exit_game_event();
             },
             {}, // On focus
             {}, // On blur
          }},
       });
       return;


  - name: move_cursor_to
    parameters:
      - name: target_tmj_object_id
        type: int
        default_argument: 0
    body: |
      AllegroFlare::Layouts::Elements::CursorDestination *next_destination =
         //cursor_map.
         layout.find_cursor_destination_by_tmj_object_id(target_tmj_object_id);
      if (target_tmj_object_id == 0)
      {
         // Nothing
         // TODO: Consider >boop< sound or unmoving cursor animation
      }
      else
      {
         if (current_cursor_destination && current_cursor_destination->on_blur)
         {
            current_cursor_destination->on_blur();
         }

         current_cursor_destination = next_destination;

         if (current_cursor_destination && current_cursor_destination->on_focus)
         {
            current_cursor_destination->on_focus();
         }

         set_selection_cursor_box_to_new_position();
      }
      return;


  - name: move_cursor_up
    body: |
      int next_id = current_cursor_destination->move_up_to_target_tmj_object_id;
      move_cursor_to(next_id);
      return;


  - name: move_cursor_down
    body: |
      int next_id = current_cursor_destination->move_down_to_target_tmj_object_id;
      move_cursor_to(next_id);
      return;


  - name: move_cursor_left
    body: |
      int next_id = current_cursor_destination->move_left_to_target_tmj_object_id;
      move_cursor_to(next_id);
      return;


  - name: move_cursor_right
    body: |
      int next_id = current_cursor_destination->move_right_to_target_tmj_object_id;
      move_cursor_to(next_id);
      return;


  - name: set_selection_cursor_box_to_new_position
    body: |
      layout_cursor_selection_box.reposition_to(
         current_cursor_destination->x,
         current_cursor_destination->y
      );
      layout_cursor_selection_box.resize_to(
         current_cursor_destination->width,
         current_cursor_destination->height
      );
      return;


  - name: load_level_by_identifier
    type: bool
    virtual: true
    override: true
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    body: |
      return false;
    body_dependency_symbols:
     - TryingLayouts::Gameplay::Level


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_event_to_update_input_hints_bar();
      //emit_show_and_size_input_hints_bar_event();
      return;


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_hide_and_restore_size_input_hints_bar_event();
      return;


  - name: update
    body: |
      layout_cursor_selection_box.update();

      layout_camera_2d.position.x = -layout_cursor_selection_box.get_position().x;
      layout_camera_2d.position.y = -layout_cursor_selection_box.get_position().y;

      layout_camera_2d.position.x = (int)(layout_camera_2d.position.x / 1920) * 1920;
      layout_camera_2d.position.y = (int)(layout_camera_2d.position.y / 1080) * 1080;

      return;


  - name: render
    body: |
      ALLEGRO_FONT *font = obtain_font();

      layout_camera_2d.start_transform();
      layout.render();
      layout_cursor_selection_box.render();
      layout_camera_2d.restore_transform();
      return;


  - name: game_event_func
    virtual: true
    override: true
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ game_event ]
    body: |
      return;


  - name: primary_update_func
    virtual: true
    override: true
    parameters:
      - name: time_now
        type: double
        default_argument: 0.0f
      - name: delta_time
        type: double
        default_argument: 1.0f
    guards: [ initialized ]
    body: |
      // Update stuff here (take into account delta_time)
      update();
      return;


  - name: primary_render_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      // Render stuff here
      render();
      return;



  - name: virtual_control_button_up_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: this function
      using namespace AllegroFlare;
      //if (!is_processing_user_input()) return;

      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_UP)
      {
         move_cursor_up();
      }
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_DOWN)
      {
         move_cursor_down();
      }
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_RIGHT)
      {
         move_cursor_right();
      }
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_LEFT)
      {
         move_cursor_left();
      }
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_A
         || virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_MENU
         )
      {
         if (current_cursor_destination->on_activation) current_cursor_destination->on_activation();
         //select_menu_option();
      }
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_X)
      {
         //exit_screen();
      }
      //call_on_finished_callback_func(); // Consider technique to exit
      return;
    body_dependency_symbols:
      - AllegroFlare::VirtualControllers::GenericController


  - name: virtual_control_axis_change_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: obtain_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Regular.ttf -32");


dependencies:


  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Gameplay
    headers: [ AllegroFlare/Screens/Gameplay.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: AllegroFlare::VirtualControllers::GenericController
    headers: [ AllegroFlare/VirtualControllers/GenericController.hpp ]
  - symbol: TryingLayouts::Gameplay::Screen
    headers: [ TryingLayouts/Gameplay/Screen.hpp ]
  - symbol: TryingLayouts::Gameplay::Level
    headers: [ TryingLayouts/Gameplay/Level.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::AssetStudio::Database
    headers: [ AllegroFlare/AssetStudio/Database.hpp ]
  - symbol: AllegroFlare::Layouts::Layout
    headers: [ AllegroFlare/Layouts/Layout.hpp ]
  - symbol: AllegroFlare::Camera2D
    headers: [ AllegroFlare/Camera2D.hpp ]
  - symbol: AllegroFlare::Elements::SelectionCursorBox
    headers: [ AllegroFlare/Elements/SelectionCursorBox.hpp ]
  - symbol: AllegroFlare::Layouts::Elements::CursorDestination
    headers: [ AllegroFlare/Layouts/Elements/CursorDestination.hpp ]


